<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cahier Du Jour on Ma valise de programmeur</title>
    <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/cat%C3%A9gories/cahier-du-jour/index.xml</link>
    <description>Recent content in Cahier Du Jour on Ma valise de programmeur</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <atom:link href="https://etiennecharignon.github.io/ma-valise-de-programmeur/cat%C3%A9gories/cahier-du-jour/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Share rather than enforce practices</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_9/</link>
      <pubDate>Tue, 20 Oct 2009 17:46:13 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_9/</guid>
      <description>&lt;p&gt;Une citation de Toyota extraite du document &lt;a href=&#34;http://www.leanprimer.com/wiki/index.php?title=Main_Page&#34;&gt;lean primer by Larman and Vodde&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;rdquo;{If we try to simply get everyone to the current standard you are missing opportunities to get better. You are not taking into account how times are changing. There has to be lots of flexibility in allowing creativity along the way… Standards are not developed and then communicated from headquarters to all the plants. Rigid standards will only kill kaizen… It is yokoten every time—share best practices.
…We must let individuals from plants decide what they will do to fix their problems and close gaps. We cannot have someone from corporate saying you need to do X, Y, Z, because this is completely contrary to Toyota problem solving.}&amp;rdquo; [LH08]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fluidifier le trafic</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_8/</link>
      <pubDate>Thu, 07 May 2009 23:03:26 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_8/</guid>
      <description>&lt;p&gt;L&amp;rsquo;agilité est à la méthode classique ce que les ronds-points sont aux carrefours.&lt;/p&gt;

&lt;p&gt;Si on y croit très fort, on peut imaginer qu&amp;rsquo;en réglant soigneusement la synchronisation des feux d&amp;rsquo;un carrefour on arrive à y faire passer le trafic d&amp;rsquo;un rond point, mais ce n&amp;rsquo;est pas le cas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;effet des commentaires sur l&#39;interprétation d&#39;un code contenant des erreurs</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_6/</link>
      <pubDate>Thu, 14 Feb 2008 22:27:07 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_6/</guid>
      <description>

&lt;h2 id=&#34;l-effet-des-commentaires-sur-l-interprétation-d-un-code-contenant-des-erreurs&#34;&gt;L&amp;rsquo;effet des commentaires sur l&amp;rsquo;interprétation d&amp;rsquo;un code contenant des erreurs&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;effet des commentaires sur l&amp;rsquo;interprétation d&amp;rsquo;un code contenant des erreurs peut être mesuré assez élégamment par une expérience dans laquelle plusieurs versions d&amp;rsquo;un même code est produite, une avec des commentaires corrects, une avec un ou deux commentaires incorrects, et une sans aucun commentaire (Okimoto, 1970). Pour certains types de code, au moins, l&amp;rsquo;interprétation correcte de ce que fait le programme peut être obtenue avec plus de fiabilité et plus rapidement sans commentaire du tout. Des commentaires corrects, s&amp;rsquo;ils sont bien construits, réduisent les erreurs si l&amp;rsquo;on compare avec les cas contenant des commentaires incorrects ou biaisés. Quoi qu&amp;rsquo;il en soit, beaucoup de programmeurs expérimentés ont pris l&amp;rsquo;habitude de masquer tous les commentaires quand ils scrutent le listing d&amp;rsquo;un programme à la recherche d&amp;rsquo;erreurs, de manière à réduire l&amp;rsquo;&amp;ldquo;effet contexte&amp;rdquo; qui, quoi que utile pour comprendre un programme correct, ne fait que compliquer la tâche déjà impossible du débuggage.&lt;/p&gt;

&lt;p&gt;Ma traduction d&amp;rsquo;un extrait de &lt;a href=&#34;../article_40&#34;&gt;The psychology of computer programming&lt;/a&gt;, Gerald M. Weinberg.&lt;/p&gt;

&lt;h2 id=&#34;the-effect-of-comments-on-interpretation-of-erroneous-code&#34;&gt;The effect of comments on interpretation of erroneous code.&lt;/h2&gt;

&lt;p&gt;The effect of comments on interpretation of erroneous code can be mesured quite nicely in an experiment in which several versions of the same code are produced, one with correct comments, one with one or two incorrect comments, and one with perhaps no comments at all (Okimoto, 1970). For certain types of code, at least, correct interpretation of what the program does can be obtained more reliably and faster without any comments at all. Correct comments, if well constructed, reduce errors when compared with cases in which incorrect or misleading comments are used. Nevertheless, many exprienced programmers make a habit of covering all comments when scrutinizing a program listing for errors, thus reducing the set which, though helpful to understanding a correct program, only complicates the already impossible job of debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../article_40&#34;&gt;The psychology of computer programming&lt;/a&gt;, Gerald M. Weinberg. p. 164 of the silver anniversary edition.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Produire un logiciel est un apprentissage</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_5/</link>
      <pubDate>Wed, 13 Feb 2008 16:39:30 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_5/</guid>
      <description>&lt;p&gt;Mettre en place un projet de développement logiciel, c&amp;rsquo;est réunir d&amp;rsquo;une part des gens qui ne savent pas ce qu&amp;rsquo;ils veulent (experts fonctionnels) et d&amp;rsquo;autre part des gens qui ne savent pas comment faire (experts techniques).&lt;/p&gt;

&lt;p&gt;A la fin du projet, chacun en aura appris un peu plus sur son métier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Château de cartes</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_4/</link>
      <pubDate>Tue, 15 Jan 2008 17:05:56 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_4/</guid>
      <description>&lt;p&gt;Un programmeur qui travaille sans tests automatisés est comme un aveugle qui construit un château de cartes.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est pour ça qu&amp;rsquo;il devient tout blanc quand le client vient le voir pour une modification tardive des exigences fonctionnelles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spaghetti Bolognaise</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_3/</link>
      <pubDate>Thu, 10 Jan 2008 15:03:39 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_3/</guid>
      <description>&lt;p&gt;From &lt;a href=&#34;../article_51&#34;&gt;Quality Software Management: congruent action&lt;/a&gt; (p125), by Gerald Weinberg, about the variety-reducing style of management:&lt;/p&gt;

&lt;p&gt;&amp;hellip;As we used to say, developers were treated like &amp;lsquo;coding cattle&amp;rsquo;. If you weren&amp;rsquo;t a good producer, they would get rid of you.&lt;/p&gt;

&lt;p&gt;Presumably, you were transformed into meatballs for serving with spaghetti code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comme c&#39;est long d&#39;écrire la spécification !</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_2/</link>
      <pubDate>Fri, 04 Jan 2008 16:18:29 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/breve/breve_2/</guid>
      <description>&lt;p&gt;A partir du moment où la méthode de travail embrasse le changement, il n&amp;rsquo;est plus la peine de se préparer autant avant de commencer. Que de temps gagné sur la longue phase d&amp;rsquo;écriture des spécifications.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>