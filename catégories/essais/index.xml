<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Essais on Ma valise de programmeur</title>
    <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/cat%C3%A9gories/essais/index.xml</link>
    <description>Recent content in Essais on Ma valise de programmeur</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <atom:link href="https://etiennecharignon.github.io/ma-valise-de-programmeur/cat%C3%A9gories/essais/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vers une gestion de projet distribuée ?</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_117/</link>
      <pubDate>Sun, 25 Aug 2013 23:00:53 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_117/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Quel est le mode d&amp;rsquo;organisation le plus efficace&amp;nbsp;? Centralisation ou distribution&amp;nbsp;? Face a la complexité du monde dans lequel nous vivons deux comportements sont possibles, quand il s&amp;rsquo;agit de choisir un mode d&amp;rsquo;organisation. Que ce soit pour classer des documents, concevoir une architecture logicielle, organiser une grande quantité de données, organiser un travail collectif, organiser une entreprise, ou que sais-je, on peut choisir de mettre en place un point de référence centrale ou pas.&lt;/p&gt;

&lt;p&gt;Supposez que vous deviez organiser la gestion documentaire d&amp;rsquo;une entreprise. Vous pouvez tout naturellement décider de mettre en place dans votre système d&amp;rsquo;information un serveur central sur lequel tous les documents devront être déposés et où ils pourront facilement être retrouvés. Ainsi vous êtes sûr qu&amp;rsquo;il y a bien une version de référence permettant de s&amp;rsquo;y retrouver parmi les innombrables versions qui ne manqueront pas de se multiplier sur les ordinateurs des différents collaborateurs.
Une autre solution consiste à garder les documents sur les ordinateurs des collaborateurs, de manière distribuée, et à  mettre en place un système de synchronisation de répertoires entre les différentes machines. Aujourd&amp;rsquo;hui de nombreuses solutions techniques existent pour faire cela comme par exemple le très connu et inventeur du concept DropBox, mais aussi plus récemment Google Drive, Skydrive,&amp;hellip; ou encore plus distribué&amp;nbsp;: Syncthing.&lt;/p&gt;

&lt;p&gt;A part le dernier, tous ces outils sont basés sur &amp;ldquo;le Cloud&amp;rdquo; et justement, c&amp;rsquo;est intéressant, est-ce que le cloud n&amp;rsquo;est pas une forme moderne de centralisation qui contredirait ma démonstration que la tendance actuelle est à la distribution&amp;nbsp;?
Pourquoi les entreprises sont-elles si réticentes à utiliser les services de Google documents&amp;nbsp;? C&amp;rsquo;est qu&amp;rsquo;elles ont l&amp;rsquo;impression de centraliser leur documents &amp;ldquo;chez google&amp;rdquo;&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;Mais ne nous y trompons pas. Le Cloud n&amp;rsquo;existerait pas sans la distribution. C&amp;rsquo;est l&amp;rsquo;émergence des bases de données distribuées (le fameux &amp;ldquo;noSql&amp;rdquo;) qui a rendu possible le Cloud et qui le distingue d&amp;rsquo;une simple architecture client-serveur.&lt;/p&gt;

&lt;p&gt;Le Cloud ne permet pas de savoir exactement où se trouve l&amp;rsquo;information. Elle est répartie (distribuée) en différents points du réseau, elle est recopiée, modifiée, synchronisée… Et pourtant ça fonctionne et les utilisateurs ont une perception très cohérente et fiable.&lt;/p&gt;

&lt;p&gt;Un autre monde, plus proche des développeurs, a connu ces dernières années sa révolution vers la distribution. Il s&amp;rsquo;agit de la gestion de version, les VCS (version control system en anglais). N&amp;rsquo;y a-t-il pas un contexte où la centralisation semblait régner en maître incontesté&amp;nbsp;? C&amp;rsquo;est déjà assez compliqué d&amp;rsquo;avoir à gérer la multitude des versions des fichiers sources de nos programmes sans qu&amp;rsquo;on puisse se permettre de tolérer de voir toutes ses versions se répartir en plus sur une multitude de machines. Non, la seule solution est d&amp;rsquo;avoir un dépôt de référence central. Certains d&amp;rsquo;entre vous utilisent-ils encore clear-case&amp;nbsp;? l&amp;rsquo;outil d&amp;rsquo;IBM initialement développé par Rational. Avec clear case, la centralisation est poussée à son paroxysme, l&amp;rsquo;outil ne laissant le développeur ne garder en local qu&amp;rsquo;uniquement les modifications qu&amp;rsquo;il est en train d&amp;rsquo;apporter. Le mode de fonctionnement par défaut est le mode par verrou pessimiste (c&amp;rsquo;est à dire que l&amp;rsquo;information qu&amp;rsquo;une personne est en train de créer une nouvelle version d&amp;rsquo;un fichier est aussi centralisée). Aujourd&amp;rsquo;hui, Git (un &amp;ldquo;DVCS&amp;rdquo; pour distributed version control system) est à la mode et le passage sur ce nouveau système, s&amp;rsquo;il n&amp;rsquo;est pas déjà fait, fait partir des plans à court ou moyen terme. Si ce n&amp;rsquo;est pas Git, c&amp;rsquo;est un des ses équivalent.
Le système, plutôt que de chercher la centralisation, offre une grande facilité pour créer de multiples versions locales et une encore plus grande facilité pour s&amp;rsquo;échanger ses versions. Le Cloud qui ne se laisse pas oublier, nous a apporté  GitHub.com, ce réseau social d&amp;rsquo;échange de version de code source communautaire et social, une révolution pour le monde du logiciel libre. Vous l&amp;rsquo;aurez compris GitHub est basé sur Git.&lt;/p&gt;

&lt;p&gt;Bref, la technologie s&amp;rsquo;est emparé des principes de distribution. D&amp;rsquo;ailleurs, je ne l&amp;rsquo;ai pas mentionné, mais on constate aussi cette évolution au niveau de la technologie des micro-processeurs. Aujourd&amp;rsquo;hui, ce n&amp;rsquo;est plus la course à un coeur central le plus puissant possible, comme on a pu le voir dans les années 90, mais la multiplication des coeurs 4, 8, 16 coeurs, et encore bien plus à venir… sur de simples machines de bureau ou encore plus incroyable, sur les téléphones. Je me souviens de mon impression à l&amp;rsquo;arrivée des premières machines à multiple coeurs. Je me demandais ce qu&amp;rsquo;on allait bien pouvoir faire du deuxième coeur pendant que le premier &amp;ldquo;ferait le travail&amp;rdquo;&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;Tiens&amp;nbsp;!… Mais ça me fait penser aux critiques communes à propos du travail de programmation en binôme…&lt;/p&gt;

&lt;p&gt;En fait, pour être tout à fait honnête nous sommes là où je voulais en venir. Cette &amp;ldquo;folie&amp;rdquo; des systèmes distribués à bien évidement atteint aussi l&amp;rsquo;organisation des projets. L&amp;rsquo;évolution actuelle vers l&amp;rsquo;agilité est-elle autre chose&amp;nbsp;? L&amp;rsquo;auto-organisation des équipes Scrum c&amp;rsquo;est ça. Pour monter à l&amp;rsquo;échelle des équipes de programmeurs, il faut éliminer le centre de direction, le fameux &amp;ldquo;Chef de projet&amp;rdquo; pour distribuer cette responsabilité et ainsi gagner en performance. Bien évidement, ça ne se fait pas sans difficulté. Il y a toujours un coût de synchronisation à payer, comme pour les coeurs d&amp;rsquo;un micro-processeur. Si on s&amp;rsquo;y prend mal, ce coût peut même devenir fatal au projet.&lt;/p&gt;

&lt;p&gt;Mais les bienfaits de la distribution ne s&amp;rsquo;arrêtent pas à la frontière des projets. Des entreprises se lancent aussi dans l&amp;rsquo;aventure. Il y a l&amp;rsquo;exemple de la société de jeux vidéo Valve &lt;a href=&#34;http://www.qualitystreet.fr/2013/07/02/culture-dentreprise-et-management-agile-lintegration-chez-zappos-valve/&#34;&gt;dont parle mon collègue Jean-Claude sur son blog&lt;/a&gt; qui est entièrement auto-organisé depuis 1996&amp;nbsp;! J&amp;rsquo;ai bon espoir que cette pratique se répande encore bien plus avec la démocratisation de l&amp;rsquo;agilité.&lt;/p&gt;

&lt;p&gt;Je voudrais aussi mentionner cette initiative française de l&amp;rsquo;entreprise /ut7 qui nous a fait un retour de leur expérience aux &lt;a href=&#34;http://agenda2013.scrumday.fr/event/85&#34;&gt;Scrum days en avril dernier&lt;/a&gt;, expérience qui dure déjà depuis 5 ans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dans cette station de ski, les pistes rouges sont trop faciles !</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_115/</link>
      <pubDate>Mon, 20 May 2013 22:55:10 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_115/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;Des User stories estimées en point de complexité ? Qui n&#39;y comprend rien ?&lt;/div&gt;

&lt;h2 id=&#34;qu-est-ce-qu-une-user-story&#34;&gt;Qu&amp;rsquo;est ce qu&amp;rsquo;une User Story&lt;/h2&gt;

&lt;p&gt;Dans nos projets agiles, nous découpons nos besoins en petites fonctionnalités. Cette liste de fonctionnalités est appelée le Product Backlog (ou &amp;ldquo;carnet de produit&amp;rdquo; comme disent les Quebecois).&lt;/p&gt;

&lt;p&gt;Chaque fonctionnalité est appelée &amp;ldquo;User Story&amp;rdquo;. En francais, on entend parfois &amp;ldquo;Histoire Utilisateur&amp;rdquo;, mais comme tout le monde dit User Story, je vais rester là dessus. Une User Story est courte, elle peut être écrite sur une carte en utilisant le formalisme suivant.
En tant que&amp;hellip; J&amp;rsquo;ai besoin de&amp;hellip; dans le but de&amp;hellip;&lt;/p&gt;

&lt;p&gt;Par exemple&amp;nbsp;:
En tant que client, j&amp;rsquo;ai besoin d&amp;rsquo;un reçu dans le but de tenir mes comptes.&lt;/p&gt;

&lt;h2 id=&#34;et-la-complexité-alors-nbsp&#34;&gt;Et la complexité alors&amp;nbsp;?&lt;/h2&gt;

&lt;p&gt;Dans le but de permettre la planification de notre projet, nous avons besoin d&amp;rsquo;estimer la taille du travail à faire. En agile, on introduit une distinction importante. Nous faisons la différence entre la complexité et l&amp;rsquo;effort. C&amp;rsquo;est souvent là que la compréhension coince un peu. Quelle est cette nuance et pourquoi en a-t-on besoin&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;Pourquoi est-ce si important que ces points soient &amp;ldquo;abstraits&amp;rdquo;, personne n&amp;rsquo;est à l&amp;rsquo;aise avec les abstractions&amp;hellip; Pourtant, je peux vous donner plusieurs exemples dans la vie de tous les jours où nous utilisons une échelle de mesure abstraite. C&amp;rsquo;est le cas de la pointure de vos chaussures qui s&amp;rsquo;exprime en point. Mais rentrons dans le détail avec une autre analogie&amp;nbsp;:&lt;/p&gt;

&lt;p&gt;Quand vous allez aux sports d&amp;rsquo;hiver, la difficulté des pistes est exprimée avec des couleurs. Vous avez les pistes vertes qui sont faciles, les pistes bleues, un peu plus difficiles, puis les pistes rouges encore au dessus et enfin les pistes noires qui sont les plus difficiles.&lt;/p&gt;

&lt;p&gt;Comme je viens de le dire, la couleur d&amp;rsquo;une piste est liée à la difficulté, inclinaison des pentes, longueur, présence de champs de bosses&amp;hellip;&lt;/p&gt;

&lt;p&gt;Au début de votre semaine de vacance au ski, descendre une piste rouge vous demandera sans doute beaucoup d&amp;rsquo;effort. Vous aurez mal aux jambes et aux bras à la fin de la journée, alors que vous n&amp;rsquo;aurez descendu que très peu de pistes. Par contre, en fin de séjour, votre performance aura beaucoup augmenté et vous descendrez 10 fois la piste rouge en question, en ayant l&amp;rsquo;impression de &amp;ldquo;voler&amp;rdquo; (en tout cas, ça se passait comme ça quand j&amp;rsquo;étais jeune).&lt;/p&gt;

&lt;p&gt;Bien que vous soyez plus performant, la piste n&amp;rsquo;a pas changé de couleur. En d&amp;rsquo;autres termes, l&amp;rsquo;effort necessaire pour descendre une piste rouge a diminué.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est exactement la même chose avec la complexité des users story. Nous estimons la complexité des User Story en points. Si deux User Stories sont de difficulté identique, on leur donne le même nombre de point. Pour placer votre échelle, vous partez d&amp;rsquo;une référence, une ou deux User Stories &amp;ldquo;standards&amp;rdquo; auxquelles vous donnerez arbitrairement un nombre de points. Par exemple, US 1: 3 pts et US 2: 8 pts.&lt;/p&gt;

&lt;p&gt;Au cours du déroulement de votre projet, les User Story que vous aviez estimées à 5 points vont vous paraitre de plus en plus faciles. Il est très important de continuer à les estimer toujours avec le même nombre de points (la piste rouge est toujours rouge, même à la fin des vacances).&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;estimation de complexité est une estimation relative, car c&amp;rsquo;est ce qu&amp;rsquo;il y a de plus facile à faire. Notre cerveau est une machine à comparer les choses deux à deux.&lt;/p&gt;

&lt;h2 id=&#34;comment-je-passe-à-la-planification-nbsp&#34;&gt;Comment je passe à la planification&amp;nbsp;?&lt;/h2&gt;

&lt;p&gt;Pour pouvoir procéder à la planification, sur la base de vos estimations de points de complexité, il vous manque un moyen de rapprocher cette complexité de l&amp;rsquo;effort (c&amp;rsquo;est à dire le nombre de jour.homme qu&amp;rsquo;il faut pour faire un point).&lt;/p&gt;

&lt;p&gt;On appelle ce rapport la &amp;ldquo;productivité&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Productivité = nombre de point de complexité / nombre de jour.homme&lt;/p&gt;

&lt;p&gt;Attention, dans un projet agile, on calcule une productivité moyenne d&amp;rsquo;une équipe. Si vous utilisez la méthode Scrum, vous pouvez par exemple diviser la vélocité, (c&amp;rsquo;est à dire, le nombre de points de complexité réalisé dans une itération) par le nombre de jour.homme de l&amp;rsquo;itération&lt;/p&gt;

&lt;p&gt;Il est important de ne pas mesurer de productivité individuelle pour ne pas voir votre planning pollué par un exercice d&amp;rsquo;optimisation de l&amp;rsquo;utilisation des &amp;ldquo;ressources humaines&amp;rdquo;. Cette optimisation se fera par le jeu de l&amp;rsquo;auto-organisation de l&amp;rsquo;équipe. Inutile pour un manager d&amp;rsquo;aller mettre son nez là-dedans. C&amp;rsquo;est une perte de temps et c&amp;rsquo;est extrêmement démotivant pour l&amp;rsquo;équipe.&lt;/p&gt;

&lt;p&gt;A noter que cette productivité est un facteur d&amp;rsquo;ajustement de votre planning.
Au départ du projet, vous faites une estimation de votre productivité à venir et vous planifiez votre projet sur cette base. Au fur et à mesure du déroulement du projet vous allez avoir un ajustement de cette première estimation. Vous ajusterez votre planification en fonction de la productivité constatée. Il y a de fortes chances que cette productivité augmente avec le temps. Le planning devra à nouveau être mis à jour.&lt;/p&gt;

&lt;p&gt;Dans un projet avec des itérations, il est assez simple de mettre à jour ce planning à chaque fin d&amp;rsquo;itération.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Une image du travail d&#39;équipe</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_109/</link>
      <pubDate>Tue, 09 Apr 2013 10:33:30 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_109/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Est-ce que vous connaissez cette expérience qui a été mené par IndustrialLogic pour promouvoir la programmation en binôme&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://industriallogic.com/games/pairdraw.html&#34;&gt;Pair Drawing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cette expérience consiste à mettre en lumière la différence entre le travail individuel et le travail en pair, par la création d&amp;rsquo;un dessin.&lt;/p&gt;

&lt;p&gt;Voici les deux premiers dessins mis en avant sur le site&amp;nbsp;:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/gif/soloFred.gif&#34; alt=&#34;Une image du travail d&amp;#39;équipe images/gif/soloFred.gif&#34;&gt;
  
  &lt;figcaption&gt;
    
    Solo Drawing
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/gif/pairBarb.gif&#34; alt=&#34;Une image du travail d&amp;#39;équipe images/gif/pairBarb.gif&#34;&gt;
  
  &lt;figcaption&gt;
    
    Pair Drawing
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Par cette comparaison il apparait clairement qu&amp;rsquo;un travail à deux est beaucoup plus riche qu&amp;rsquo;un travail en solo.&lt;/p&gt;

&lt;p&gt;Pourtant, les dessins suivants m&amp;rsquo;inspirent d&amp;rsquo;autres conclusions:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/gif/soloChad.gif&#34; alt=&#34;Une image du travail d&amp;#39;équipe images/gif/soloChad.gif&#34;&gt;
  
  &lt;figcaption&gt;
    
    Beau dessin en solo
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Nous somme face ici à une personne qui sait dessiner. Si on la laisse faire seule, on obtient un beau résultat. La personne est créative. Le dessin est intègre et cohérent.&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;est-ce pas justement une situation que l&amp;rsquo;on rencontre souvent en informatique&amp;nbsp;? Des gens passionnés qui travaillent le soir pour perfectionner leur connaissances. Qui s&amp;rsquo;entraine seul sur des petits programmes qui les amusent.&lt;/p&gt;

&lt;p&gt;Seulement voilà. Le plus souvent, pour des questions de délai, il n&amp;rsquo;est pas possible de confier la réalisation d&amp;rsquo;un logiciel à une personne seule (quand bien même elle serait extraordinairement productive).&lt;/p&gt;

&lt;p&gt;On en arrive tout naturellement à vouloir constituer des équipes.&lt;/p&gt;

&lt;p&gt;Comment est-il possible que des équipes d&amp;rsquo;informaticiens talentueux, compétent et créatif, conduisent à des logiciels qui ressemble plutôt à ça&amp;nbsp;:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/gif/pairRalph.gif&#34; alt=&#34;Une image du travail d&amp;#39;équipe images/gif/pairRalph.gif&#34;&gt;
  
  &lt;figcaption&gt;
    
    L&amp;#39;image d&amp;#39;un projet informatique réalisé en équipe
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Ce dessin illustre bien les enjeux du travail collectif&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Garantir l&amp;rsquo;intégrité conceptuelle&lt;/li&gt;
&lt;li&gt;Créer l’alignement des personnes vers un objectif commun.&lt;/li&gt;
&lt;li&gt;le travail collectif&amp;nbsp;: cela s&amp;rsquo;apprend (sinon on fera un dessin de débutant)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais aussi&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accepter que la production de l&amp;rsquo;équipe n&amp;rsquo;a rien de commun avec ce qu&amp;rsquo;aurai produit un talent seul avec beaucoup de temps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plusieurs personnes doivent accepter cela&amp;nbsp;: les managers évidement, mais aussi les développeurs.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;pair programming en anglais
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Les projets : pilotage par la planification ou par la qualité ?</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_108/</link>
      <pubDate>Sat, 17 Sep 2011 22:23:57 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_108/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Je pourrais vous parler de gestion de projet informatique mais j&amp;rsquo;ai eu récemment, pendant une sieste, l&amp;rsquo;envie d&amp;rsquo;utiliser une autre sorte de projet: une pièce de théâtre&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Au départ de notre projet nous commençons par chercher un texte. Nous parcourons les bibliothèques publiques ou les étagères de nos logements, voire internet pour trouver le texte d&amp;rsquo;une pièce qui nous plaise.&lt;/p&gt;

&lt;p&gt;Supposons pour l&amp;rsquo;exemple que l&amp;rsquo;on ait trouvé une pièce en 2 actes de 3 scènes. Pour monter cette pièce, nous sommes une troupe d&amp;rsquo;amateurs qui se réunissent chaque semaine. Nous avons prévu de jouer le 2eme weekend du mois de mai. Nous avons déjà réservé la salle. Il nous reste 10 semaines, c&amp;rsquo;est à dire 10 soirées.&lt;/p&gt;

&lt;h2 id=&#34;pilotage-du-projet-par-la-planification&#34;&gt;Pilotage du projet par la planification&lt;/h2&gt;

&lt;p&gt;Dans ce mode, le texte définit exactement et complètement notre projet.&lt;/p&gt;

&lt;p&gt;Comment s&amp;rsquo;y prend-on pour monter notre pièce&amp;nbsp;? On fait le plan!:&lt;/p&gt;

&lt;p&gt;Nous avons 10 soirées.  Nous prévoyons de travailler une scène par soirée pendant 6 semaines. Nous ferons ensuite la répétition de l&amp;rsquo;acte 1 en entier puis la semaine suivante l&amp;rsquo;acte 2 en entier. Et pour finir la Générale sans les décors puis la Générale avec les décors.&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/planning_oriente_planning.png&#34; alt=&#34;Les projets : pilotage par la planification ou par la qualité ? images/png/planning_oriente_planning.png&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;L&amp;rsquo;avantage&amp;nbsp;: on est sûr d&amp;rsquo;avoir fini de répéter au moins une fois toutes les scènes. Nous aurons ensuite du temps pour faire &amp;ldquo;l&amp;rsquo;intégration&amp;rdquo;, c&amp;rsquo;est à dire les répétitions enchainant les scènes.&lt;/p&gt;

&lt;p&gt;A la fin de ce projet nous jouerons la pièce exactement telle qu&amp;rsquo;elle est décrite dans le texte que nous avons trouvé.&lt;/p&gt;

&lt;p&gt;Nous avons fait l&amp;rsquo;hypothèse qu&amp;rsquo;il est possible de répéter chaque scène en une soirée. En fait, cette hypothèse n&amp;rsquo;est pas formulée de cette façon. Ce que nous faisons implicitement, c&amp;rsquo;est que nous ajustons la qualité au temps que nous avons. Nous préparerons quelque chose chaque soir. Si la soirée est trop courte la scène sera moins bien préparée, si nous avons trop de temps ce qui n&amp;rsquo;arrive jamais comme chacun sait, ce sera du temps perdu (nous travaillerons plus mollement ces soirées-là). Au final certaines scènes seront mieux préparées que d&amp;rsquo;autres.&lt;/p&gt;

&lt;p&gt;Nous ajusterons la qualité de notre réalisation pour que notre projet aboutisse. Nous sommes une troupe amateur et nous inviterons nos amis à venir &amp;ldquo;subir&amp;rdquo; notre pièce. Après tout, nous sommes là pour nous amuser. Si nous prenons plaisir à faire ce que nous faisons, nos amis seront contents&amp;nbsp;!&lt;/p&gt;

&lt;h2 id=&#34;pilotage-par-la-qualité&#34;&gt;Pilotage par la qualité&lt;/h2&gt;

&lt;p&gt;Ce qui nous intéresse dans ce mode c&amp;rsquo;est avant tout la qualité de notre réalisation. Nous sommes des amateurs, mais nous ne voulons pas être ridicules devant nos amis&amp;nbsp;!&amp;nbsp;:-)&lt;/p&gt;

&lt;p&gt;Après tout, le texte que nous avons trouvé n&amp;rsquo;est peut-être pas le texte original. Et puis quand bien même, ce texte n&amp;rsquo;est peut-être pas le meilleur. On pourrait sans doute l&amp;rsquo;améliorer pour que ce soit plus drôle… y ajouter des références contemporaines&amp;hellip;&lt;/p&gt;

&lt;p&gt;Voici comment nous allons planifier notre projet… En effet, ce mode de pilotage ne signifie pas que nous ne faisons pas de plan.&lt;/p&gt;

&lt;p&gt;Parmi les 6 scènes, nous en avons identifié 3 qui sont essentielles et qui tiennent à elles seules l&amp;rsquo;intrigue principale. Nous allons travailler en priorité ces 3 scènes. Le premier soir nous travaillerons la première de ces 3 scènes. La deuxième semaine, nous travaillerons la 2eme de ces scènes, mais en l&amp;rsquo;enchaînant à la première. A la fin de cette deuxième soirée, nous devrons être capables de jouer les 2 premières scènes, comme une sorte de mini pièce. Si tout va bien, nous travaillerons les 3 scènes lors de la troisième semaine, mais si c&amp;rsquo;est nécessaire nous travaillerons encore la scène 1 et 2 ensemble pendant une soirée…&lt;/p&gt;

&lt;p&gt;Viendront ensuite s&amp;rsquo;ajouter les scènes supplémentaires pouvant ajouter de la valeur à notre pièce sans pour autant faire partie du cœur de notre projet.
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/planning_oriente_qualite.png&#34; alt=&#34;Les projets : pilotage par la planification ou par la qualité ? images/png/planning_oriente_qualite.png&#34;&gt;
  
&lt;/figure&gt;

Cette organisation de notre projet devrait nous permettre de montrer une pièce bien préparée et dont la qualité nous satisferait.&lt;/p&gt;

&lt;p&gt;A noter qu&amp;rsquo;avec ce mode de fonctionnement nous avons très rapidement une pièce prête à être présentée, bien avant la date de la représentation. Il y a par contre un travail de création bien plus important puisqu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;adapter les scènes déjà répétées pour leur permettre d&amp;rsquo;intégrer au fur et à mesure les nouvelles scènes.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Le pilotage par la qualité semblent faire plus de compromis au départ, mais comme il est plus efficace, on se retrouve au final avec un meilleur résultat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Il faut lâcher prise pour obtenir plus&amp;nbsp;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Avertissement:
Mon analogie avec le théâtre n&amp;rsquo;est pas une preuve en soi. Ce pilotage par la qualité que je décris est parfaitement adapté pour le développement logiciel &amp;ndash;je le sais pour l&amp;rsquo;avoir expérimenté déjà plusieurs fois&amp;ndash; mais, je ne sais absolument pas si cela fonctionnerait vraiment pour préparer une pièce de théâtre.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;La vision que je vous présente d&amp;rsquo;un tel projet est très simplifiée dans le but d&amp;rsquo;illustrer mon explication. Je m&amp;rsquo;excuse pour les acteurs qui pourraient me lire et ne pas se reconnaitre. Je ne tiens pas compte, notamment, du travail de création des costumes et des décors
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Référentiel des concepts, pratiques et compétences agiles</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_107/</link>
      <pubDate>Sun, 12 Jun 2011 23:41:45 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_107/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Ca y est, j&amp;rsquo;ai enfin fait l&amp;rsquo;effort d&amp;rsquo;installer sur mon blog le &lt;a href=&#34;http://referentiel.institut-agile.fr/outils.html&#34;&gt;souligneur de l&amp;rsquo;institut agile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A partir de maintenant, pour tous les messages écrit et à venir, s&amp;rsquo;ils contiennent un mot au répertoire du référentielle de pratiques, il sera automatiquement souligné et une définition de référence en sera donnée.&lt;/p&gt;

&lt;p&gt;Par exemple&amp;nbsp;: Programmation en binômes&lt;/p&gt;

&lt;p&gt;Pour installer cet outil, rien de plus simple. Il suffit d&amp;rsquo;ajouter le javascript suivant dans toutes les pages de votre site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://referentiel.institut-agile.fr/souligneur.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meuhhh !</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_104/</link>
      <pubDate>Thu, 16 Dec 2010 22:19:00 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_104/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Je viens d&amp;rsquo;intégrer depuis peu une équipe toute jeune qui a bien du mal à conduire ses réunions. En particulier, sous le feu de la passion, les discussions avaient tendance à partir dans toutes les directions.&lt;/p&gt;

&lt;p&gt;En bon consultant agile, j&amp;rsquo;ai proposé d&amp;rsquo;utiliser une boite à meuh&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;Levée de boucliers&amp;nbsp;! Ah non, c&amp;rsquo;est ridicule et ça fait du bruit, on va se faire remarquer.&lt;/p&gt;

&lt;p&gt;Bon! La proposition n&amp;rsquo;a pas été acceptée&amp;hellip;.&lt;/p&gt;

&lt;p&gt;A la réunion suivante, le sujet n&amp;rsquo;a pas manqué de diverger et nous partions encore dans une digression de la digression quand un membre de l&amp;rsquo;équipe a commencé à faire &amp;ldquo;meuh&amp;rdquo; avec la bouche&amp;nbsp;! Ça a bien plu à tout le monde. Quel soulagement d&amp;rsquo;avoir un moyen de nous recadrer sans être obligés de passer par un tas de justifications et d&amp;rsquo;explications.&lt;/p&gt;

&lt;p&gt;Et voila. Nous avons maintenant un nouvel outil à disposition:&lt;/p&gt;

&lt;h2 id=&#34;le-meuh-avec-la-bouche-nbsp&#34;&gt;Le meuh avec la bouche&amp;nbsp;!&lt;/h2&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/jpg/racheumeuneu-meuh.jpg&#34; alt=&#34;Meuhhh ! images/jpg/racheumeuneu-meuh.jpg&#34;&gt;
  
  &lt;figcaption&gt;
    
    Le meuh avec la bouche !
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Programmer est une activité sociale</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_88/</link>
      <pubDate>Wed, 15 Dec 2010 16:48:15 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_88/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Les informaticiens aiment communiquer. Ils n&amp;rsquo;ont pas les lunettes sales comme on l&amp;rsquo;entend dire parfois.&lt;/p&gt;

&lt;p&gt;Quand j&amp;rsquo;étais étudiant (en informatique), nous nous retrouvions par nécessité dans les salles informatique pour travailler. En effet il était difficile à l&amp;rsquo;époque de travailler chez soi car les ordinateurs étaient encore trop chers pour la plus part d&amp;rsquo;entre nous. C&amp;rsquo;était plaisant de partager notre peine (les solutions sont souvent abstraites et difficile à comprendre), nos peurs de l&amp;rsquo;échec et notre passion communes.&lt;/p&gt;

&lt;p&gt;Personnellement, je n&amp;rsquo;aime pas du tout programmer seul. J&amp;rsquo;aime travailler en équipe pour réaliser un programme. On discute des solutions, on est plus créatif ensemble. On se motive les uns les autres, on est plus productifs.&lt;/p&gt;

&lt;p&gt;Depuis que j&amp;rsquo;ai découvert les méthodes de programmation agile je me sens bien dans mon travail. Bien sûr, avant aussi j&amp;rsquo;ai eu l&amp;rsquo;occasion de ressentir le plaisir du travail d&amp;rsquo;équipe&amp;hellip; mais c&amp;rsquo;était ponctuel&amp;hellip; Tous le monde s&amp;rsquo;en trouvait ému, de l&amp;rsquo;équipe elle même jusqu&amp;rsquo;au directeur de département&amp;nbsp;: &amp;ldquo;Bravo les gars, vous faite de bon boulot&amp;rdquo;. Et le chef de projet de lui répondre&amp;nbsp;: &amp;ldquo;Tu aurais du les voire vendredi dernier avant la livraison, Eric a demandé à Stephane de libérer le verrou sur quelques fichiers pour qu&amp;rsquo;il puisse effectuer une modification parallèle pendant que Stéphane terminait le module principale&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;La difference des équipes agiles est qu&amp;rsquo;elle recherche cette activité sociale.&lt;/p&gt;

&lt;p&gt;La première choses est qu&amp;rsquo;il faut des gens qui s&amp;rsquo;entendent. Ce n&amp;rsquo;est pourtant pas si compliqué non&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;Quelques petits trucs qui ont marchés parfois&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toute l&amp;rsquo;équipe dans le même bureau&lt;/li&gt;
&lt;li&gt;Du travail en binôme&lt;/li&gt;
&lt;li&gt;Pas de pression excessive&lt;/li&gt;
&lt;li&gt;Un minimum de réussite&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Une équipe agile, une équipe avec du caractère.</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_103/</link>
      <pubDate>Mon, 01 Nov 2010 22:17:04 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_103/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Voici quelques interrogations que l&amp;rsquo;on entend parfois à propos des équipes agiles.&lt;/p&gt;

&lt;p&gt;&lt;quote&gt;Est-ce qu&amp;rsquo;il n&amp;rsquo;y a pas malgré tout un chef&amp;nbsp;?&lt;/quote&gt;&lt;/p&gt;

&lt;p&gt;Oui&amp;nbsp;! En tout cas, il y a un ou des leaders.&lt;/p&gt;

&lt;p&gt;&lt;quote&gt;Les personnes expérimentées ne sont-elles pas forcément plus influentes&amp;nbsp;?&lt;/quote&gt;&lt;/p&gt;

&lt;p&gt;Oui&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;&lt;quote&gt;Est-ce qu&amp;rsquo;on peut vraiment faire binômer un développeur senior avec un débutant&amp;nbsp;? &lt;/quote&gt;&lt;/p&gt;

&lt;p&gt;Non, sans doute pas très longtemps.&lt;/p&gt;

&lt;p&gt;&lt;quote&gt;En tant qu&amp;rsquo;analyste métier, quelle est ma place&amp;nbsp;?&lt;/quote&gt;&lt;/p&gt;

&lt;p&gt;Et on entend parfois des responsables fonctionnels dire des choses comme:
&lt;quote&gt; &amp;ldquo;De toute façon, notre référence sera toujours le document de spec&amp;nbsp;!&amp;rdquo;&lt;/quote&gt;&lt;/p&gt;

&lt;p&gt;Il est apparemment assez difficile de comprendre ce qu&amp;rsquo;est une équipe agile pour les praticiens du cycle en V.
Toutes ces réflexions, toutes ces résistances au changement, viennent de la représentation mentale que nous avons de ce qu&amp;rsquo;est une équipe.&lt;/p&gt;

&lt;p&gt;Dans le cycle en V, les équipes sont cloisonnées. Les personnes sont regroupées par spécialisations&amp;nbsp;: les spécialistes métiers sont ensemble pour former une équipe, les développeurs sont ensemble, les testeurs de même, les architectes (ça c&amp;rsquo;est sans doute le plus dingue)&amp;hellip;&lt;/p&gt;

&lt;p&gt;Dans le cycle en V, les équipes sont homogènes par construction, suivant le bon vieil adage&amp;nbsp;: &amp;ldquo;qui se ressemble s&amp;rsquo;assemble&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Avec l&amp;rsquo;agilité arrive la fin du cloisonnage et c&amp;rsquo;est pour moi une des révolutions majeures. Un projet de développement logiciel (depuis sa vision jusqu&amp;rsquo;à sa livraison concrète au client), n&amp;rsquo;est réalisé que par une seule équipe&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;une-équipe-cross-fonctionnelle&#34;&gt;Une équipe cross-fonctionnelle&lt;/h2&gt;

&lt;p&gt;Une équipe agile est le rassemblement de l&amp;rsquo;ensemble des compétences nécessaires pour mener à bien le projet. Elle réunit des personnes d&amp;rsquo;horizons différents avec des compétences variées. Une équipe agile est par définition très contrastée. Elle est le rassemblement d&amp;rsquo;individualités fortes plutôt que l&amp;rsquo;alignement d&amp;rsquo;une armée d&amp;rsquo;unités de production interchangeables. C&amp;rsquo;est une équipe qui a du caractère.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;équipe agile est jugée sur le produit fini. Il n&amp;rsquo;y a pas de livrable intermédiaire. Cela signifie que si des analystes fonctionnels sont présents dans l&amp;rsquo;équipe, ils seront eux aussi jugés sur le produit final et non sur la qualité de leur document de spécification (qui peut, par ailleurs, tout à fait exister dans un projet agile). Cela signifie qu&amp;rsquo;ils sont responsables du contenu fonctionnel de l&amp;rsquo;application, mais aussi de la bonne transmission de ce contenu fonctionnel aux développeurs et de la validation de la présence effective de ce contenu dans l&amp;rsquo;application. Entre parenthèse, on comprend mieux qu&amp;rsquo;ils doivent s&amp;rsquo;intéresser aux tests&amp;nbsp;!&lt;/p&gt;

&lt;h2 id=&#34;scalabilité-nbsp&#34;&gt;Scalabilité&amp;nbsp;?&lt;/h2&gt;

&lt;p&gt;Si l&amp;rsquo;on en croit l&amp;rsquo;article &lt;a href=&#34;http://www.cesames.net/architecture-des-systemes/les-enjeux-de-larchitecture/une-complexite-de-plus-en-plus-envahissante&#34;&gt;suivant&lt;/a&gt;, les grands projets ont encore moins de chance de réussir. Qui plus est, il est sans doute assez hasardeux de généraliser sur le sujet tant les expériences correspondantes sont spécifiques. Les grands projets de ce type trouvent des équilibres de fonctionnement très différents d&amp;rsquo;un cas à l&amp;rsquo;autre.&lt;/p&gt;

&lt;p&gt;Quoi qu&amp;rsquo;il en soit, on peut monter en charge tout en gardant des équipes de caractère. Une telle équipe ne peut être très grande. Une équipe réunissant des compétences aussi variées ne pourrait pas fonctionner si elle était constituée de 50 personnes.&lt;/p&gt;

&lt;p&gt;Une équipe de ce type ne peut dépasser les 7 ou 8 personnes.&lt;/p&gt;

&lt;p&gt;Pour monter en charge et réaliser de gros projets il est possible de multiplier les équipes agiles en distribuant les éléments fonctionnels du projet sur plusieurs équipes. Chaque équipe reste une équipe cross-fonctionelle, et l&amp;rsquo;on ajoute une activité de synchronisation des différentes équipes&amp;nbsp;: ce que l&amp;rsquo;on appelle par exemple le Scrum de Scrum ou méta-Scrum.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;En fait ce n&amp;rsquo;est pas tout à fait exact, il est tout à fait possible de constituer plusieurs équipes, mais pour la simplicité de mon propos, disons pour l&amp;rsquo;instant qu&amp;rsquo;il n&amp;rsquo;y en a qu&amp;rsquo;une
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RT @Galilée la terre tourne autour du soleil</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_102/</link>
      <pubDate>Tue, 14 Sep 2010 21:50:45 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_102/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Bonjour la liste&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;hellip;&lt;em&gt;Le découpage en plusieurs équipes me semble avant tout une affaire de contexte&lt;/em&gt;&amp;hellip;&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Si Galilée avait posté sur cette liste que la terre tourne autour du soleil, nous lui aurions sans doute répondu&amp;nbsp;: &amp;ldquo;ça dépend du contexte mon cher Galilée&amp;rdquo; (enfin on aurait parlé italien évidement).&lt;/p&gt;

&lt;p&gt;Et ce n&amp;rsquo;est pas faux, tout est relatif et dans un système composé uniquement d&amp;rsquo;une terre et d&amp;rsquo;un soleil, bien malin celui qui pourra dire qui tourne autour de qui.&lt;/p&gt;

&lt;p&gt;Mais pourtant, la science nous apporte quelques certitudes. Prenons par exemple Newton, avant d&amp;rsquo;être un parent éloigné de l&amp;rsquo;iPhone, c&amp;rsquo;était un scientifique qui nous a donné la loi de la gravitation universelle.&lt;/p&gt;

&lt;p&gt;Cette loi est universelle&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;En effet, aussi surprenant que cela puisse paraître, les milliard d&amp;rsquo;étoiles qui composent l&amp;rsquo;univers obéissent à cette simple loi qui peut être expliquée sans difficulté à un lycéen.&lt;/p&gt;

&lt;p&gt;Il existe bien dans la nature des lois de ce type. Dans notre métier d&amp;rsquo;informaticien il est une loi qui nous impacte beaucoup, c&amp;rsquo;est la loi des enchaînements et des aléas qui sous tend la théorie des contraintes.&lt;/p&gt;

&lt;h2 id=&#34;cette-théorie-dit-que-la-vitesse-d-une-chaine-de-production-est-égale-à-la-vitesse-du-maillon-le-plus-faible&#34;&gt;Cette théorie dit que la vitesse d&amp;rsquo;une chaine de production est égale à la vitesse du maillon le plus faible.&lt;/h2&gt;

&lt;p&gt;Si on s&amp;rsquo;autorise la caricature, notre chaine est la suivante:&lt;/p&gt;

&lt;p&gt;Spec=&amp;gt;Dev=&amp;gt;Test&lt;/p&gt;

&lt;p&gt;En pratique le maillon le plus lent, c&amp;rsquo;est le dev, c&amp;rsquo;est pour cette raison qu&amp;rsquo;en général il y a plus de développeurs que de gens pour spécifier et tester.&lt;/p&gt;

&lt;p&gt;On remarque aussi un goulet d&amp;rsquo;étranglement à la taille du stock qui se trouve devant.&lt;/p&gt;

&lt;p&gt;Dans le cas de l&amp;rsquo;informatique, ce tas se matérialise par la taille des cahiers de charges ou des documents de spécification.&lt;/p&gt;

&lt;p&gt;Pour améliorer la vitesse de la chaine, il y a plusieurs point d&amp;rsquo;actions&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;1 - identifier le goulet d&amp;rsquo;étranglement&lt;/p&gt;

&lt;p&gt;les points que j&amp;rsquo;ai mentionnés ci-dessus&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ressources stressées, surmenées&lt;/li&gt;
&lt;li&gt;travail en cours qui s&amp;rsquo;empile devant le goulet (stock)&lt;/li&gt;
&lt;li&gt;ressources derrière le goulet qui attendent du travail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 - exploiter le goulet&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enlever toutes les tâches non productives&lt;/li&gt;
&lt;li&gt;alimenter le goulet (pas de rupture en terme d&amp;rsquo;alimentation du travail à faire)&lt;/li&gt;
&lt;li&gt;ne pas surcharger le goulet (il doit &amp;ldquo;tirer&amp;rdquo; le travail à faire)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;prioriser&amp;rdquo; soigneusement le travail du goulet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3 - Subordonner le reste du système au goulet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;soulager le goulet de ce qui peut être fait sans lui&lt;/li&gt;
&lt;li&gt;travailler au rythme du goulet (cela pourrait entraîner que les autres postes travaillent plus lentement, mais le but n&amp;rsquo;est pas de garder les gens occupés, le but est d&amp;rsquo;améliorer la production du système entier).&lt;/li&gt;
&lt;li&gt;assurer que la qualité du travail en cours donné au goulet est de haute qualité&lt;/li&gt;
&lt;li&gt;traiter la production du goulet avec prudence pour ne pas gâcher le travail du goulet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4 - Elevez le goulet (arrive après 3)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;investir des ressources et du temps pour améliorer la performance du goulet&amp;nbsp;: training, relaxation, bonne ambiance, meilleurs outils, plus de gens (ce qui ralentit au début), &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5 - Et recommencer en 1&amp;nbsp;: ne pas laisser l&amp;rsquo;inertie devenir un goulet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il y a toujours un goulet d&amp;rsquo;étranglement&amp;nbsp;! on peut toujours faire mieux. retourner toujours aux étapes 0 et 1&amp;nbsp;: est-ce que notre but est toujours valable&amp;nbsp;? Est-ce que le goulet s&amp;rsquo;est déplacé&amp;nbsp;? &amp;ldquo;Quand on élimine le problème 1, le problème 2 reçoit une promotion&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6 - Changer le système&lt;/p&gt;

&lt;p&gt;Parfois, il n&amp;rsquo;y a plus moyen d&amp;rsquo;améliorer le système. Alors il faut changer la structure du système. C&amp;rsquo;est beaucoup plus difficile. On rencontre des objections&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Des règles cachées&amp;nbsp;: &amp;ldquo;mais on a toujours fait les choses comme ça&amp;nbsp;!&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Ne touchez pas à ça&amp;nbsp;! vous allez tout casser&amp;nbsp;!&amp;rdquo; -&amp;gt; Pourquoi&amp;nbsp;?, Est-ce qu&amp;rsquo;on peut faire un petit essai&amp;nbsp;?&amp;hellip;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Vous ne comprenez pas!&amp;rdquo; -&amp;gt; Pouvez-vous expliquer&amp;nbsp;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;l-influence-de-la-loi-des-enchaînements-et-des-aléas-sur-l-architecture-orientée-composant&#34;&gt;L&amp;rsquo;influence de la loi des enchaînements et des aléas sur l&amp;rsquo;architecture orientée composant&lt;/h2&gt;

&lt;p&gt;La loi des enchaînements et des aléas fait que dans une chaine ou des choses sont produites en série, les aléas individuels ont un gros impact sur le rythme de production de la chaine complète, jusqu&amp;rsquo;à la rendre complètement chaotique&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est cette loi qui rend les architectures orientées composant si difficile à gérer.&lt;/p&gt;

&lt;p&gt;Ce type d&amp;rsquo;architecture suppose qu&amp;rsquo;on peut faire travailler individuellement des équipes sur différents composants qui seront ensuite assemblés pour former un tout cohérent. Dans ce type d&amp;rsquo;architecture, nos esprits rationnels s&amp;rsquo;autorisent toutes les combinaisons à priori. On espère qu&amp;rsquo;on pourra ajuster tardivement le produit total en assemblant les composants de différentes manières (par exemple, jouer sur les versions, pour assembler A en version v1 avec B en version v2)&lt;/p&gt;

&lt;p&gt;Certains composants sont dépendants d&amp;rsquo;autres composants et si c&amp;rsquo;est vraiment mal fait, on peut même avoir des cycles&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;On rencontre particulièrement ce type d&amp;rsquo;architecture dans les entreprises qui n&amp;rsquo;ont pas la culture de l&amp;rsquo;erreur. C&amp;rsquo;est à dire des cultures où on suppose à priori que tout le monde est parfait. Ce type de culture ignore les aléas qui sinon rendraient évident l&amp;rsquo;impossibilité de faire tourner une telle machine.&lt;/p&gt;

&lt;h2 id=&#34;la-contre-proposition-de-l-agilité-nbsp-les-feature-teams&#34;&gt;La contre-proposition de l&amp;rsquo;agilité&amp;nbsp;: les &amp;ldquo;feature teams&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Dans cette configuration, chaque équipe est en charge du développement d&amp;rsquo;une ou plusieurs exigences fonctionnelles (&amp;ldquo;features en anglais&amp;rdquo;). La distinction avec les composants ci-dessus est que ces exigences fonctionnelles sont définies par un client et non un technicien.&lt;/p&gt;

&lt;p&gt;Les équipes intègrent &lt;strong&gt;en continu&lt;/strong&gt; leur travail dans la solution globale. Chaque équipe peut ainsi gérer indépendamment son rythme de livraison.&lt;/p&gt;

&lt;p&gt;Chaque équipe rend compte de son avancement c&amp;rsquo;est à dire surtout de son rythme auprès du client. Bien sûr les équipes ont des interactions, mais chaque équipe est responsable de ses features vis-à-vis de la personne qui tire de la valeur ajoutée de leurs réalisations.&lt;/p&gt;

&lt;p&gt;La coordination opérationnelle des équipes peut être prise en charge par un projet de plus haut niveau appelé meta-scrum ou scrum-de-scrum dans la méthode scrum.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;exemple type d&amp;rsquo;une architecture orientée composants est une organisation qui constituerait des équipes par couche technique: une équipe IHM, une équipe &amp;ldquo;service métier&amp;rdquo; et une équipe &amp;ldquo;accès base de donnée&amp;rdquo;.&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/jpg/architecture_orientee_composants.jpg&#34; alt=&#34;RT @Galilée la terre tourne autour du soleil images/jpg/architecture_orientee_composants.jpg&#34;&gt;
  
  &lt;figcaption&gt;
    
    Architecture orientée composants
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;


&lt;p&gt;Le même exemple organisé en feature teams:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/jpg/Feature_Teams.jpg&#34; alt=&#34;RT @Galilée la terre tourne autour du soleil images/jpg/Feature_Teams.jpg&#34;&gt;
  
  &lt;figcaption&gt;
    
    Feature Teams
    
  &lt;/figcaption&gt;
  
&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://fr.groups.yahoo.com/group/xp-france/message/8909&#34;&gt;http://fr.groups.yahoo.com/group/xp-france/message/8909&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Olivier, si tu lis ce message, pardonne moi d&amp;rsquo;avoir repris ta phrase pour illustrer mon propos. Il ne s&amp;rsquo;agit pas d&amp;rsquo;un message personnel. Cette idée de contexte a fait nettement consensus sur la liste
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Merci à Pascal Van Cauwenberghe pour sa présentation sur ce sujet à la conférence XP-Days 2007 dont j&amp;rsquo;ai pratiquement recopié les mots.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Voir l&amp;rsquo;excellent roman &amp;ldquo;&lt;a href=&#34;../article_77&#34;&gt;Le But&lt;/a&gt;&amp;rdquo; de Eliyahu M. Goldratt sur le sujet
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intégration Continue</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_100/</link>
      <pubDate>Tue, 06 Apr 2010 16:19:11 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_100/</guid>
      <description>

&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;En voyant ce titre, je suis sûr que certains vont s&amp;rsquo;attendre à ce que j&amp;rsquo;explique lequel d&amp;rsquo;Hudson ou d&amp;rsquo;un autre outil est le meilleur&amp;nbsp;! je vous le dis tout de suite, ces personnes peuvent passer à autre chose et augmenter le taux de rebond dans mes statistiques google analytics.&lt;/p&gt;

&lt;p&gt;Ce que je voudrais expliquer ici, c&amp;rsquo;est pourquoi il faut faire de l&amp;rsquo;intégration continue. A noter que l&amp;rsquo;intégration continue dont je parle ici n&amp;rsquo;est pas simplement une question informatique. C&amp;rsquo;est une notion qui s&amp;rsquo;applique à tout projet complexe où plusieurs sous-parties sont réalisés séparément puis assemblées pour former un tout.
La réalisation d&amp;rsquo;un logiciel rentre dans cette catégorie, mais c&amp;rsquo;est aussi le cas d&amp;rsquo;une pièce de théâtre par exemple.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;la-phase-d-intégration-n-est-pas-sous-controle&#34;&gt;La phase d&amp;rsquo;intégration n&amp;rsquo;est pas sous controle&lt;/h2&gt;

&lt;p&gt;En effet, première constatation, nous n&amp;rsquo;avons aucun contrôle direct sur la phase d&amp;rsquo;intégration. En effet, une fois que celle-ci est démarrée, il faut aller jusqu&amp;rsquo;au bout avant d&amp;rsquo;avoir quelque chose. Il n&amp;rsquo;est pas possible de s&amp;rsquo;arrêter à mi-chemin et espérer avoir un tout cohérent.&lt;/p&gt;

&lt;p&gt;Voici le schéma que propose l&amp;rsquo;intégration continue&amp;nbsp;:&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Image_2.png&#34; alt=&#34;Intégration Continue images/png/Image_2.png&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;L&amp;rsquo;argument que l&amp;rsquo;on entend parfois est&amp;nbsp;: &amp;ldquo;on n&amp;rsquo;a pas le temps&amp;rdquo;. L&amp;rsquo;idée est simple, pour optimiser le travail d&amp;rsquo;intégration, on propose alors de le reporter à la fin. En faisant une phase spécialisée, on peut optimiser cette phase.&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/lateIntegration1.png&#34; alt=&#34;Intégration Continue images/png/lateIntegration1.png&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;Mais justement, c&amp;rsquo;est ce que je viens de dire, c&amp;rsquo;est une illusion. Cette phase n&amp;rsquo;est pas sous contrôle. Une fois le travail d&amp;rsquo;intégration commencé, il faudra aller jusqu&amp;rsquo;au bout. Ce qui donne en pratique le schéma suivant&amp;nbsp;:&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Image_3.png&#34; alt=&#34;Intégration Continue images/png/Image_3.png&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;La seule façon de réduire la durée de la phase d&amp;rsquo;intégration est de réduire la quantité de travail à intégrer et donc de réduire la taille de la phase de réalisation. Mais comment savoir à l&amp;rsquo;avance quelle est la bonne longueur de cette phase de réalisation&amp;nbsp;? Je vous le donne Émile&amp;nbsp;: il faut faire de l&amp;rsquo;intégration continue (voir premier schéma).
Plus la fréquence d&amp;rsquo;intégration est élevée moins la quantité de développement non intégrée sera faible le jour de l&amp;rsquo;échéance.&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Image_2-2.png&#34; alt=&#34;Intégration Continue images/png/Image_2-2.png&#34;&gt;
  
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h2 id=&#34;les-diagrammes-d-effet-1&#34;&gt;Les diagrammes d&amp;rsquo;effet&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Un peu de théorie de modélisation. Les diagrammes d&amp;rsquo;effet permettent de représenter dans un système, la dynamique de variation d&amp;rsquo;une grandeur par rapport à une autre.&lt;/p&gt;

&lt;p&gt;Soit par exemple un système à deux variable, X et Y.&lt;/p&gt;

&lt;p&gt;On représente X et Y dans des nuages si ce sont des grandeurs non mesurables, ou dans un ovale si elles sont mesurables:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_01.56.50.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_01.56.50.png&#34;&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Si on veut représenter que Y augmente quand X augmente, on le fait tout simple avec une flèche:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_01.25.25.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_01.25.25.png&#34;&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Si par contre Y diminue quand X augmente, on ajoute un rond sur la flèche:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_01.26.22.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_01.26.22.png&#34;&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;un-cercle-vicieux-nbsp-l-intégration&#34;&gt;Un cercle vicieux&amp;nbsp;: l&amp;rsquo;intégration&lt;/h2&gt;

&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_01.53.19.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_01.53.19.png&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;Les diagrammes d&amp;rsquo;effet sont très pratiques pour modéliser les cercles vicieux. Ils permettent aussi de modéliser la solution.&lt;/p&gt;

&lt;p&gt;Il existe deux types de relation entre X et Y.
- Des relations dictées par la nature. Par exemple, dans le schéma ci-dessus. Quand le temps entre deux intégrations augmente, la complexité du travail d&amp;rsquo;intégration augmente de manière inexorable. Le monde est comme ça. Personne n&amp;rsquo;y peut rien. C&amp;rsquo;est une loi de la nature.
- Des relations non dictées par la nature. Ces dernières sont représentés par un carré. Il est possible de choisir si Y va augmenter ou diminuer quand on va augmenter X. C&amp;rsquo;est à nous de prendre la décision.
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_02.05.02.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_02.05.02.png&#34;&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Et voilà ce que devient le schéma de notre système:
&lt;figure class=&#34;center&#34;&gt;
  &lt;img src=&#34;https://etiennecharignon.github.io/ma-valise-de-programmeur/images/png/Capture_d_ecran_2010-04-04_a_02.07.40.png&#34; alt=&#34;Intégration Continue images/png/Capture_d_ecran_2010-04-04_a_02.07.40.png&#34;&gt;
  
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Si vous décidez d&amp;rsquo;espacer encore plus les intégrations, vous alimentez le cercle vicieux. Si vous décidez de les rapprocher&amp;hellip; vous cassez le cercle infernal.&lt;/p&gt;

&lt;p&gt;La conclusion&amp;nbsp;: Si vous avez des difficultés à faire quelque chose, faite le plus souvent&amp;nbsp;! Faites de l&amp;rsquo;intégration continue.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai rencontré des entreprises qui mettent plus de 6 mois entre la livraison des composants logiciel et la mise en production. Je ne dis pas que prendre la décision de rapprocher les intégrations est facile. Mais c&amp;rsquo;est la seule issue. C&amp;rsquo;est le problème avec les cercles vicieux. C&amp;rsquo;est très difficile d&amp;rsquo;en sortir quand on est très engagé dedans. C&amp;rsquo;est beaucoup plus facile au début. Il vaut mieux agir au début et par petit changement que trop tard et par grands à-coups.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;voir le volume 1 de la série d&amp;rsquo;ouvrage de Gerald Weinberg: &lt;a href=&#34;../article_51&#34;&gt;Quality Software Management:Systems Thinking&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Le code est la documentation</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_99/</link>
      <pubDate>Thu, 18 Feb 2010 22:53:25 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_99/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Encore hier, j&amp;rsquo;ai passé un temps fou pour trouver la solution à un problème de configuration du mapping de ma base de données avec Hibernate&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;Dans les forums on trouve des tas de solutions toutes plus erronées ou inutiles les unes que les autres.&lt;/p&gt;

&lt;p&gt;Voici un petit exemple pour illuster&amp;nbsp;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You could make the OneToMany-side the owning side by removing the &amp;ldquo;mappedBy&amp;rdquo; element and setting the @JoinColumn on the ManyToOne-side as &amp;ldquo;insertable=false&amp;rdquo; and &amp;ldquo;updateable=false&amp;rdquo;. You must also add the @JoinColumn on the OneToMany-side.&lt;/p&gt;

&lt;p&gt;This way you don&amp;rsquo;t have to handle the index or the collection by hand and it is equivalent to setting ManyToOne-side to &amp;ldquo;inverse=false&amp;rdquo; in .hbm.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Et je me faisais la réflexion que, en informatique, une bonne documentation, c&amp;rsquo;est avant tout &amp;ldquo;des exemples qui marchent&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Mon code est un très bon exemple de &amp;ldquo;code qui marche&amp;rdquo;. Il faut évidement s&amp;rsquo;être prouvé à soi-même qu&amp;rsquo;il marche, par des tests automatisés par exemple, mais une fois que c&amp;rsquo;est fait. C&amp;rsquo;est bon&amp;nbsp;! Notre code est un bon exemple de code qui marche.&lt;/p&gt;

&lt;p&gt;Ce que je suis en train de dire c&amp;rsquo;est que le code d&amp;rsquo;une application qui marche est une très bonne documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un logiciel se construit par le toit</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_95/</link>
      <pubDate>Sun, 20 Dec 2009 23:19:21 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_95/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;&amp;ndash; &amp;ldquo;Allons, un peu de bon sens&amp;nbsp;! Pour fabriquer une maison, il faut commencer par les fondations, puis faire les murs et ensuite seulement vous pouvez poser le toit. On ne peut pas commencer par le toit&amp;nbsp;!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;En effet, la force d&amp;rsquo;attraction gravitationnelle nous oblige à commencer par les fondations. Et il faut qu&amp;rsquo;elles soient bonnes puisque le reste de la maison va ensuite tenir en équilibre dessus.&lt;/p&gt;

&lt;p&gt;Le problème, c&amp;rsquo;est que quand on applique cette métaphore au développement logiciel, il n&amp;rsquo;y a pas de force d&amp;rsquo;attraction gravitationnelle&amp;nbsp;!&lt;/p&gt;

&lt;p&gt;Un grand nombre de logiciels sont construits en suivant ce qu&amp;rsquo;on appelle un modèle en couche. C&amp;rsquo;est le cas en particulier de la majorité des applications web. Pour faire simple, dans un modèle à trois couches, vous avez une couche d&amp;rsquo;accès à la base de données, aussi appelée couche basse, une couche de service métier &amp;ndash; couche intermédiaire &amp;ndash;, puis une couche de présentation &amp;ndash; aussi dite couche haute.&lt;/p&gt;

&lt;p&gt;Et voilà, c&amp;rsquo;est la catastrophe, puisque la couche d&amp;rsquo;accès à la base de donnée est dite basse, on se sent obligé de commencer par elle&amp;nbsp;!!!&lt;/p&gt;

&lt;p&gt;Non, dans ce type d&amp;rsquo;architecture en couche, il faut commencer par l&amp;rsquo;interface utilisateur et donc la couche haute. Il faut commencer par le toit.&lt;/p&gt;

&lt;p&gt;Commencer par l&amp;rsquo;interface utilisateur, c&amp;rsquo;est focaliser sur le service qui doit être rendu. On écrit le code qui répond au besoin à ce niveau là, puis on descend ensuite sur la couche d&amp;rsquo;en dessous, où l&amp;rsquo;on ne fait aussi que ce qui est necessaire, pour arriver enfin sur la couche basse avec une définition claire et très simple de ce qu&amp;rsquo;il y à faire.&lt;/p&gt;

&lt;p&gt;Une approche par le bas conduit inévitablement à produire un effort inutile, ce que l&amp;rsquo;on appelle de la sur-conception. Vous allez être obligé d&amp;rsquo;anticiper au niveau de la couche basse des besoins qui pourraient vous être demandés par la couche de présentation.&lt;/p&gt;

&lt;p&gt;Evidement, je n&amp;rsquo;ai pas parlé de distribuer le travail de chaque couche à des équipes differentes mais c&amp;rsquo;est le même problème&amp;hellip; En pire.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scrum &#43; XP ?</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_92/</link>
      <pubDate>Thu, 22 Oct 2009 22:30:22 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_92/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Connaissez-vous la problématique théologique suivante:
Dieu reconnaît-il les hommes sur leurs actes ou les aime-t-il pour ce qu&amp;rsquo;ils sont&amp;nbsp;? En d&amp;rsquo;autres termes, les hommes ont-ils une âme&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;En fait, je ne suis pas sûr que même les prêtres puissent répondre. Il me semble que cela dépend des religions, certaines ayant choisi de ne juger que sur les actes, d&amp;rsquo;autres défendant au contraire l&amp;rsquo;existence de l&amp;rsquo;âme.&lt;/p&gt;

&lt;p&gt;Je me rend compte qu&amp;rsquo;il existe un parallelle en ce qui concerne les méthodes de travail. On retrouve le même modèle, et pour filer la métaphore, on pourrait se poser la question suivante:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;les méthodes agiles Scrum et XP ont-elles une âme&amp;nbsp;?&amp;nbsp;:-)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Doit-on juger de la qualité d&amp;rsquo;une méthode sur ses pratiques, est-ce que l&amp;rsquo;ensemble des pratiques &amp;ldquo;représentent&amp;rdquo; la méthode ou y a-t-il quelque chose de plus &amp;ldquo;derrière&amp;rdquo;&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;N&amp;rsquo;entend-on pas parfois parler de &amp;ldquo;l&amp;rsquo;esprit de la méthode&amp;rdquo;&amp;nbsp;? Est-ce que les valeurs agiles seraient cette âme&amp;nbsp;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XP et Scrum sont-elles complémentaires&amp;nbsp;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;De plus en plus, on entend parler d&amp;rsquo;entreprises pratiquant &amp;ldquo;Scrum+XP&amp;rdquo; avec la définition suivante&amp;nbsp;: &amp;ldquo;Scrum complémentée des pratiques d&amp;rsquo;ingénierie d&amp;rsquo;XP&amp;rdquo;.
En effet, contrairement à Scrum, XP propose des pratiques spécifiques au développement logiciel tel que le binomage ou le TDD&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; par exemple.&lt;/p&gt;

&lt;p&gt;Pourquoi pas. Ayant découvert XP en premier, cette méthode garde une place particulière dans mon coeur et je dirais qu&amp;rsquo;elle se suffit à elle même du point de vue des pratiques puisqu&amp;rsquo;elle contient toutes celles de scrum (cycle court, client sur site, coach agile, &amp;hellip;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XP pourrait-elle s&amp;rsquo;appliquer à un projet non informatique&amp;nbsp;?&lt;/strong&gt;
Aussi étonnant que cela puisse paraître, et c&amp;rsquo;est une découverte récente pour moi, la réponse est oui.&lt;/p&gt;

&lt;p&gt;XP est une méthode formalisée au travers de l&amp;rsquo;expression de &amp;ldquo;pattern&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&amp;rdquo; de gestion de projet, au même sens que l&amp;rsquo;on parle de pattern de conception en programmation.&lt;/p&gt;

&lt;p&gt;Ces patterns peuvent très bien s&amp;rsquo;appliquer dans le cas d&amp;rsquo;un projet non informatique.&lt;/p&gt;

&lt;p&gt;Prenons un exemple&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;a href=&#34;http://www.extremeprogramming.org/rules/standards.html&#34;&gt;Coding standards&lt;/a&gt;&amp;rdquo; &amp;nbsp;: &lt;em&gt;Code must be formatted to &lt;strong&gt;agreed&lt;/strong&gt; coding standards. Coding standards keep the code consistent and easy for the entire team to read and refactor. Code that looks the same encourages collective ownership.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sur un projet non informatique cette pratique n&amp;rsquo;a pas de sens direct&amp;hellip;
Mais quelle est l&amp;rsquo;âme qui se cache derrière la pratique&amp;nbsp;? Il s&amp;rsquo;agit de normaliser notre travail sur la base d&amp;rsquo;un accord consensuel, de manière a améliorer notre productivité collective. Ceci est tout à fait applicable à toutes sortes de projets.&lt;/p&gt;

&lt;p&gt;Par exemple, une bonne équipe projet devrait avoir une règle de nommage des sujets de ses e-mails (ne pas le laisser vide, ne pas laisser dix &amp;ldquo;RE: Rep: Fwd:&amp;hellip;&amp;ldquo;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Les âmes de Scrum et XP sont complémentaires&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alors qu&amp;rsquo;XP se présente sous la forme d&amp;rsquo;un ensemble de patterns, Scrum a choisi une voix plus accessible en se présentant sous la forme d&amp;rsquo;un processus.&lt;/p&gt;

&lt;p&gt;Les âmes d&amp;rsquo;XP et Scrum sont différentes, mais elles ont des atomes crochus. C&amp;rsquo;est pour cette raison qu&amp;rsquo;elles se marient si bien ensemble.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Test Driven Development ou en français, Développement Piloté par les Test
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;la traduction française de pattern est motif, patron ou gabarit
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Elle booste ma suite de tests ?</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_86/</link>
      <pubDate>Wed, 24 Jun 2009 22:55:34 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_86/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;Il m&amp;rsquo;est souvent arrivé de parler sur ce blog d&amp;rsquo;automatisation des tests. Ces tests qui finissent par se rassembler par centaines constituent ce que l&amp;rsquo;on appelle la &amp;ldquo;suite de test&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Au fur et à mesure que le projet grandit, cette suite devient de plus en plus longue à exécuter&amp;hellip; En fait si on n&amp;rsquo;y prend pas garde, elle dépassera même rapidement les 10 minutes puis&amp;hellip; 20&amp;hellip; Mais en fait, des choses bien plus embêtantes seront apparues avant d&amp;rsquo;en arriver là.&lt;/p&gt;

&lt;p&gt;La suite de test est exécutée dans son intégralité plusieurs fois par jours. Il est par exemple absolument indispensable de l&amp;rsquo;exécuter avant chaque commit (action de soumission de notre travail au reste de l&amp;rsquo;équipe) et nous faisons plusieurs commit par jour.
Tous les membres de l&amp;rsquo;équipe respectent cette règle&amp;hellip; personne ne voudrait être le manchot qui a fait casser la suite de test et dérangé tous les autres dans leur travail.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est la pression sociale qui est à l&amp;rsquo;oeuvre.&lt;/p&gt;

&lt;p&gt;Si la suite de test devient trop longue à s&amp;rsquo;exécuter, elle devient pénible. Le seuil se situe généralement autour de 6 ou 7 minutes. Une équipe innocente décide en général de prendre alors une mesure qui agrave son problème et diminue la qualité&amp;nbsp;: extraire dans une suite distincte les quelques tests qui posent de gros problèmes de performance et lancer cette dernière seulement de temps en temps sur une machine dédiée.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quel malheur&amp;nbsp;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cette suite va rapidement cesser de marcher. En effet, lorsqu&amp;rsquo;elle va planter la première fois, on va s&amp;rsquo;en rendre compte tard (puisque la suite n&amp;rsquo;est plus lancée aussi souvent). Il est alors difficile de trouver la cause de cette rupture. Sans compter que personne ne veut travailler sur ce problème&amp;nbsp;: &amp;ldquo;Oh non, c&amp;rsquo;est trop ch!@nt, la suite est interminable&amp;nbsp;!&amp;ldquo;.&lt;/p&gt;

&lt;p&gt;La solution à ce problème de performance est la solution générale pour les problème de performance&amp;nbsp;: optimisation. Il faut faire ce travail sur la suite de test. Il faut trouver les quelques points de lenteur et trouver une astuce pour accélérer. Avec un peu de chance, cette astuce sera aussi profitable pour l&amp;rsquo;application, mais dans la plupart des cas, cela n&amp;rsquo;aura aucun effet. Il s&amp;rsquo;agira par exemple de faire moins de choses au niveau du &amp;ldquo;setup&amp;rdquo; des tests comme d&amp;rsquo;instancier moins d&amp;rsquo;objet par défaut en base ou alors rendre les tests plus unitaires par l&amp;rsquo;utilisation d&amp;rsquo;une librairie de mock.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;agilité ? Est-ce vraiment si efficace qu&#39;on le dit ?</title>
      <link>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_85/</link>
      <pubDate>Thu, 04 Jun 2009 23:06:37 +0100</pubDate>
      
      <guid>https://etiennecharignon.github.io/ma-valise-de-programmeur/post/article_85/</guid>
      <description>&lt;div class=&#34;chapo&#34;&gt;&lt;/div&gt;

&lt;p&gt;&amp;ndash; Tiens salut Eric&lt;br /&gt;
&amp;ndash; Eh&amp;nbsp;! salut Stéphane, comment vas-tu&amp;nbsp;?&lt;br /&gt;
&amp;ndash; Ah&amp;nbsp;! je suis un peu déprimé en ce moment&amp;nbsp;!&lt;br /&gt;
&amp;ndash; Ah bon&amp;nbsp;? C&amp;rsquo;est à cause de la crise&amp;nbsp;?&lt;br /&gt;
&amp;ndash; La crise&amp;nbsp;? non&amp;nbsp;! Du travail j&amp;rsquo;en ai, et j&amp;rsquo;en suis même très content. En fait je viens de terminer une expérience passionnante. Nous avons expérimenté les méthodes agiles dans mon entreprise. C&amp;rsquo;est &lt;strong&gt;extraordinaire&lt;/strong&gt;&amp;nbsp;! J&amp;rsquo;aime à nouveau mon métier de programmeur. J&amp;rsquo;ai enfin un cadre valorisant pour faire le métier que j&amp;rsquo;aime. Je me sens efficace et le client est content du produit.
Ce que je trouve particulièrement motivant&amp;nbsp;! Enfin, j&amp;rsquo;ai pu rencontrer mon client et lui montrer ce que je sais faire. Ca n&amp;rsquo;a pas été toujours facile. Nous avons dû apprendre à nous connaître, mais le jeu en a valu la chandelle. Maintenant je comprends facilement ses enjeux et je sais qu&amp;rsquo;il connaît mes contraintes. Notre relation de travail est une relation d&amp;rsquo;adultes qui cherchent ensemble à réaliser une belle chose, un beau programme, utile et pratique.&lt;br /&gt;
&amp;ndash; Mais pourquoi es-tu déprimé&amp;nbsp;?&lt;br /&gt;
&amp;ndash; &amp;hellip; Oh&amp;hellip; après tant d&amp;rsquo;enthousiasme, je me sens vraiment con. La direction a décidé que notre projet était un échec&amp;nbsp;!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ce que je viens d&amp;rsquo;écrire ci-dessus est de la science-fiction. Toute ressemblance avec des événements ou des personnes ayant existé est tout à fait fortuite. En effet, ce n&amp;rsquo;est que ma peur qui m&amp;rsquo;inspire.&lt;/p&gt;

&lt;p&gt;On m&amp;rsquo;a très récemment posé la question suivante&amp;nbsp;:
&amp;ldquo;Mais comment prouver que les méthodes agiles vont améliorer notre système de production&amp;nbsp;?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Si j&amp;rsquo;étais directeur en position de prendre ce genre de décision voilà comment je m&amp;rsquo;y prendrais. Je choisirais dans mon entreprise des personnes en lesquelles j&amp;rsquo;ai confiance. C&amp;rsquo;est à dire des personnes que je connais pour avoir déjà réussi de belles choses et au jugement desquelles je peux me fier. Je leur ferais ensuite réaliser un projet en mode agile. Pour juger, je leur demanderais simplement ensuite si c&amp;rsquo;était mieux comme ça.&lt;/p&gt;

&lt;p&gt;Peut-être que je pourrais prendre des personnes dans mon équipe d&amp;rsquo;architecture&amp;nbsp;! En plus, pour une fois, ça leur ferait mettre en pratique leur compétences.&lt;/p&gt;

&lt;p&gt;Avec la conjoncture actuelle, la maîtrise d&amp;rsquo;ouvrage ne focalise que sur les coûts. Il faut réduire les coûts&amp;nbsp;! Mais bien dépenser son argent, n&amp;rsquo;est-ce pas une manière de réduire les coûts&amp;nbsp;? L&amp;rsquo;agilité apporte ça. Un meilleur taux de réussite globale des projets. Vous voulez des chiffres&amp;nbsp;? Faites plutôt l&amp;rsquo;expérience que j&amp;rsquo;ai décrite ci-dessus.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>